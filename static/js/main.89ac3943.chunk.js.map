{"version":3,"sources":["sounds/acabou.mp3","pages/LandingPage.js","Routes/Routes.js","App.js","reportWebVitals.js","index.js"],"names":["LandingPage","useState","task","setTask","taskTime","setTaskTime","intervalTime","setIntervalTime","dateTask","setDateTask","useEffect","Math","round","setTimeout","Audio","acabo","play","dateImplements","seconds","theDeadline","Date","setSeconds","getSeconds","toLocaleDateString","weekday","year","month","day","hour12","hour","minute","second","style","margin","width","className","htmlFor","id","type","marginBottom","defaultValue","min","onClick","theInput","document","getElementById","theTimeNumber","theTimeMode","value","Number","src","alt","fontSize","href","target","rel","Routes","exact","path","component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.89ac3943.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/acabou.7eab0dfa.mp3\";","import { useEffect, useState } from \"react\";\nimport acabo from '../sounds/acabou.mp3';\nimport './LandingPage.css';\n\nconst LandingPage = () => {\n  const [task, setTask] = useState('Nenhuma');\n  const [taskTime, setTaskTime] = useState(-1);\n  const [intervalTime, setIntervalTime] = useState(-1);\n  const [dateTask, setDateTask] = useState('');\n  useEffect(() => {\n    if (taskTime > 0 && intervalTime < 0) {\n      setIntervalTime(Math.round(taskTime / 5));\n    };\n  }, [taskTime, intervalTime]);\n  useEffect(() => {\n    if (taskTime > 0) {\n      setTimeout(() => setTaskTime(taskTime - 1), 1000);\n    }\n    if (taskTime === 0) {\n      const audio = new Audio(acabo);\n      audio.play();\n    }\n  }, [taskTime]);\n\n  useEffect(() => {\n    if (taskTime === 0 && intervalTime > 0) {\n      setTimeout(() => setIntervalTime(intervalTime - 1), 1000);\n    }\n  }, [taskTime, intervalTime]);\n\n  const dateImplements = (seconds) => {\n    const options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour12: false,\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n      second: \"2-digit\"\n    };\n    const theDeadline = new Date();\n    theDeadline.setSeconds(theDeadline.getSeconds() + seconds);\n    return theDeadline.toLocaleDateString('pt-br', options);\n  };\n\n  const initPomo = () => {\n    const theInput = document.getElementById('input-task');\n    const theTimeNumber = document.getElementById('input-time');\n    const theTimeMode = document.getElementById('select-time');\n    setTask(theInput.value !== '' ? theInput.value : 'Inominada');\n    if (theTimeMode.value === 'minutos') {\n      setTaskTime(theTimeNumber.value * 60);\n      setDateTask(dateImplements(Number(theTimeNumber.value * 60)));\n    } else {\n      setTaskTime(theTimeNumber.value);\n      setDateTask(dateImplements(Number(theTimeNumber.value)));\n    }\n\n  };\n\n  return (\n    <div>\n      <header style={ { margin: '0 auto', width: '80%' } }>\n        <h1>Bem-vindo ao método Pomodoro Personalizado!</h1>\n        <p>A Técnica Pomodoro é um método de gerenciamento de tempo desenvolvido por\n          Francesco Cirillo no final dos anos 1980. A técnica usa um cronômetro para dividir o\n          trabalho em intervalos, tradicionalmente de 25 minutos de duração, separados por\n          intervalos curtos - 5 minutos.</p>\n        <p>Aqui a técnica pode ser aplicada com alguma personalização, mas, para respeitar a técnica original, o intervalo seguirá o parâmetro de 1/5 do tempo da tarefa. </p>\n      </header>\n      <main className='main-wrapper'>\n        <hr />\n        { task === 'Nenhuma' ?\n          <div className='content-wrapper'>\n            <div className='task-wrapper'>\n              <label htmlFor='input-task'>Qual é a tarefa? </label>\n              <input id='input-task' className='input-tsk' type='text'></input>\n            </div>\n            <br />\n            <div style={ { marginBottom: '2em' } }>\n              <label htmlFor='input-time'> E qual o tempo estimado? </label>\n              <input id='input-time' className='input-number' type='number' defaultValue={ 25 } min={ 5 }></input>&nbsp;\n              <select id='select-time' className='slct-time'>\n                <option>segundos</option>\n                <option>minutos</option>\n              </select>\n            </div>\n            <br />\n            <button id='init-button' className='init-btn' type='submit' onClick={ initPomo }> Iniciar tarefa </button>\n          </div>\n          : <div className='content-wrapper'>\n            <h2>Tarefa: { task }</h2>\n            <h2> Data final da tarefa e início do intervalo: { dateTask } </h2>\n            <h2> Tempo restante da tarefa: { taskTime } segundos </h2>\n            <h2> Tempo restante do intervalo: { intervalTime } segundos </h2>\n          </div> }\n      </main>\n      <footer style={ { margin: '0 auto', width: '80%' } }>\n        <img src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRIXJJBul3Ro37snNJJe-1lAXOW2sN4aiGWNV-6ipwrifTxg3kzE3wRwzeaBfL_ItzX8hc&usqp=CAU' alt='pomodoro-clock' />\n        <p>O método se chama “Pomodoro” (tomate, em italiano) porque Cirillo usava um daqueles relógios de cozinha em formato de tomate para controlar o seu tempo.</p>\n        <a style={ { fontSize: 'large', marginBottom: '2em' } } href='https://github.com/JRGCast/pomo-timer' target=\"_blank\"\n          rel=\"noreferrer noopener\">Ir até o repositório</a>\n      </footer>\n    </div>\n  );\n};\n\nexport default LandingPage;","import { Route, Switch } from 'react-router-dom';\nimport LandingPage from '../pages/LandingPage';\nconst Routes = () => {\n  return (\n    <Switch>\n      <Route exact path='/pomo-timer' component={ LandingPage } />\n    </Switch>\n  );\n};\n\nexport default Routes;","import Routes from './Routes/Routes';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}